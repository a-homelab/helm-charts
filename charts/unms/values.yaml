# Default values for unms.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  persistence:
    unmsPvcName: &unms-pvc-name unms-data

  unms:
    image:
      tag: 2.3.35
  
  ucrm:
    image:
      tag: 3.3.11

  postgresql:
    image:
      tag: &postgresql-tag 9.6.17-debian-10-r45
  
  redis:
    image:
      tag: 5.0.13-debian-10-r72

persistence:
  enabled: yes
  pvcName: *unms-pvc-name
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "rook-cephfs"
  accessMode: ReadWriteMany
  size: 30Gi
  annotations: {}



postgresql:
  image:
    tag: *postgresql-tag

  auth:
    enablePostgresUser: true
    postgresPassword: postgres

  primary:
    initdb:
      scripts:
        setup_unms.sh: |
          #!/bin/bash

          set -o nounset
          set -o errexit
          set -o pipefail

          POSTGRES_USER="${POSTGRES_USER:-postgres}"
          UNMS_POSTGRES_DB="${UNMS_POSTGRES_DB:-unms}"
          UNMS_POSTGRES_SCHEMA="${UNMS_POSTGRES_SCHEMA:-unms}"
          UNMS_POSTGRES_USER="${UNMS_POSTGRES_USER:-unms}"
          UNMS_POSTGRES_PASSWORD="${UNMS_POSTGRES_PASSWORD:-unms}"
          UCRM_POSTGRES_SCHEMA="${UCRM_POSTGRES_SCHEMA:-ucrm}"
          UCRM_POSTGRES_USER="${UCRM_POSTGRES_USER:-ucrm}"
          UCRM_POSTGRES_PASSWORD="${UCRM_POSTGRES_PASSWORD:-ucrm}"

          DATABASE="${UNMS_POSTGRES_DB}"

          # Create single database.
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --command "CREATE DATABASE ${DATABASE}"

          # Create unms user.
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --command "CREATE USER ${UNMS_POSTGRES_USER} SUPERUSER PASSWORD '${UNMS_POSTGRES_PASSWORD}'"
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --command "GRANT ALL PRIVILEGES ON DATABASE ${DATABASE} TO ${UNMS_POSTGRES_USER}"
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --dbname "${DATABASE}" --command "CREATE SCHEMA ${UNMS_POSTGRES_SCHEMA} AUTHORIZATION ${UNMS_POSTGRES_USER}"
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --command "ALTER USER ${UNMS_POSTGRES_USER} SET search_path = ${UNMS_POSTGRES_SCHEMA},public"

          # Create ucrm user.
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --command "CREATE USER ${UCRM_POSTGRES_USER} SUPERUSER PASSWORD '${UCRM_POSTGRES_PASSWORD}'"
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --command "GRANT ALL PRIVILEGES ON DATABASE ${DATABASE} TO ${UCRM_POSTGRES_USER}"
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --dbname "${DATABASE}" --command "CREATE SCHEMA ${UCRM_POSTGRES_SCHEMA} AUTHORIZATION ${UCRM_POSTGRES_USER}"
          psql --variable ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --command "ALTER USER ${UCRM_POSTGRES_USER} SET search_path = ${UCRM_POSTGRES_SCHEMA},public"


rabbitmq:
  auth:
    username: guest
    password: guest

redis:
  architecture: replication
  auth:
    enabled: false
  master:
    podAntiAffinityPreset: hard
    # Don't disable commands needed for migration
    disableCommands: []
      # - FLUSHDB
      # - FLUSHALL
  replica:
    podAntiAffinityPreset: hard
    # Don't disable commands needed for migration
    disableCommands: []
      # - FLUSHDB
      # - FLUSHALL


replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
